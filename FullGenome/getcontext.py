#!/usr/bin/python3
class FullGenome:
    files=[]
    contexts={}
    filename=""
    loaded_contexts={}
    def __init__(self,filename):
        counter=-1
        self.filename=filename
        with open(filename,"r") as f:
            buff=""
            for line in f:
                if(line[0] == '>'):
                    if(len(buff) > 0):
                        self.files[counter].write(buff)
                    counter+=1
                    self.files.append(open(filename + "." + str(counter),"w+"))
                    self.pushcontexts(counter,buff)
                else:
                    line=line.strip()
                    buff=buff+line
            if(len(buff) > 0):
                self.files[counter].write(buff)
                self.pushcontexts(counter,buff)
        for i in self.contexts:
            self.contexts[i].close()

    def pushcontexts(self,nchr,buff):
        for i in range(0,len(buff)-2):
            context=buff[i:i+3]
            if not(context in self.contexts):
                fname=self.filename+"_"+context
                f=open(fname,"w")
                if not f:
                    print("problems opening file: "+fname)
                    raise(IOError)
                else:
                    self.contexts[context]=f
            self.contexts[context].write(str(nchr)+"\t"+str(i+2)+"\n")

    def findnearestcontext(self,context,nchr,position):
        """
        This function searches for position of the context, closest to the given position
        in given chromosome. THE POSITION ITSELF IS EXCLUDED!
         
        Here we assume that files are sorted. If they were generated by this lib - they are.
        """
        if context not in self.loaded_contexts:
            fname=self.filename+"_"+context
            f=open(self.filename+"_"+context,"r")
            self.loaded_contexts[context]=self.load_context(f)
            f.close()
        d=self.loaded_contexts[context][nchr][-1]
        positions=self.loaded_contexts[context][nchr]
        idx=positions[0]
        for i in positions:
            current_distance=abs(i-position)
            if(d>current_distance and current_distance>0):
                idx=i
                d=current_distance
            else:
                return idx
        return positions[-1]

    def load_context(self,f):
        """
        This function loads context of given chromosome into memory.
        Trying to be as memory efficient, as possible - each chromosome gets int it's own 
        list of positions
        """
        result={}
        for line in f:
            fields = line.split("\t")
            nchr=int(fields[0])
            pos=int(fields[1])
            if nchr not in result:
                result[nchr]=[]
            result[nchr].append(pos)
        return result

    def getcontext(self,nchr,npos):
        self.files[nchr].seek(npos-2)
        return self.files[nchr].read(3)


